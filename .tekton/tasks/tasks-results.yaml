apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tasks-results
spec:
  workspaces:
    - name: output
      mountPath: /artifacts
  params:
    - name: properties-file
      default: build.properties
    - name: node-version
      value: $(params.node-version)
    - name: continuous-delivery-context-secret
      value: $(params.continuous-delivery-context-secret)
    - name: coverage
      value: $(params.coverage)
    - name: pr-number
      default: ""
    - name: pr-branch
      default: ""
    - name: target-branch
      default: "main"
    - name: pr-payload
      default: ""
  steps:
    - name: print-all-results
      image: public.ecr.aws/docker/library/node:$(params.node-version)
      imagePullPolicy: IfNotPresent
      env:
        - name: PROPERTIES_FILE
          value: $(params.properties-file)
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "SONAR_TOKEN"
      script: |
        #!/bin/bash

        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH

        if find "$ARTIFACTS_PATH" -maxdepth 1 -type f -name '*.failed' | grep -q .; then
          echo "PIPELINE_RESULT=Failed"
          echo "PIPELINE_RESULT=Failed" >> $ARTIFACTS_PATH/$PROPERTIES_FILE
        else
          echo "PIPELINE_RESULT=Succeeded"
          echo "PIPELINE_RESULT=Succeeded" >> $ARTIFACTS_PATH/$PROPERTIES_FILE
        fi

        if [ "$(params.coverage)" == "true" ]; then
          echo "Running ESLint..."
          npx eslint packages/ -f json -o eslint-report.json || true

          echo "Installing SonarCloud scanner..."
          npm install -g @sonar/scan

          if [ -n "$(params.pr-number)" ]; then
            echo '$(params.pr-payload)' > pr.json

            # Extract draft flag
            if command -v jq >/dev/null 2>&1; then
              PR_IS_DRAFT=$(jq -r '.draft // "false"' pr.json)
            else
              PR_IS_DRAFT=$(grep -o '"draft":[^,}]*' pr.json | cut -d':' -f2 | tr -d '[:space:]')
              [ -z "$PR_IS_DRAFT" ] && PR_IS_DRAFT="false"
            fi
            echo "PR draft status: $PR_IS_DRAFT"

            if [ "$PR_IS_DRAFT" = "false" ]; then
              echo "Running Sonar scan for PR #$(params.pr-number)"
              sonar -Dsonar.login="$SONAR_TOKEN" \
                    -Dsonar.pullrequest.key="$(params.pr-number)" \
                    -Dsonar.pullrequest.branch="$(params.pr-branch)" \
                    -Dsonar.pullrequest.base="$(params.target-branch)"
            else
              echo "PR is draft â€” skipping Sonar scan."
            fi
          else
            echo "Running main branch analysis..."
            sonar -Dsonar.login=$SONAR_TOKEN
          fi
        fi
