apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: install-npm-dependencies
spec:
  params:
    - name: continuous-delivery-context-secret
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      default: apikey
    - name: target-branch
      value: $(params.target-branch)
    - name: node-version
      value: $(params.node-version)      
    - name: npm-version
      value: $(params.npm-version)
    - name: skip-cache
      value: $(params.skip-cache)   
    - name: prerelease
      value: $(params.prerelease)   
  workspaces:
    - name: output
      mountPath: /artifacts
  steps:
    - name: npm-install
      image: node:$(params.node-version)
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
      script: |
        #!/bin/bash
        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH

        if [ "$(params.prerelease)" == "true" ]; then
          source bin/install-prerelease.sh 
        fi

        if [ -n "$(params.npm-version)" ]; then
          npm install npm@$(params.npm-version) -g
        else
          npm install npm -g
        fi     

        if [ "$(params.skip-cache)" == "true" ]; then
          echo "Skipping npm cache..."

          echo "Installing npm dependencies..."
          npm install --loglevel verbose
        else
          echo "Restoring node_modules cache..."
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install cloud-object-storage -f -r 'IBM Cloud'
          ibmcloud login -a https://cloud.ibm.com -r eu-de --apikey $API_KEY

          apt-get update -y
          apt-get install zstd -y

          checksum=$(sha256sum package-lock.json | awk '{print $1}')
          ibmcloud cos download --bucket npm-cache --key node-modules-$(params.target-branch)-$(params.node-version)-$checksum ./node-modules.tar.zst              

          # Check the exit code of the download command
          if [ $? -eq 0 ]; then
            npmInstall=false        
            echo "Download successful."

            zstd -d node-modules.tar.zst -o node-modules.tar
            tar -xf node-modules.tar

            # Iterate over packages/*/ directories
            for package_dir in packages/*; do
              if [ -d "$ARTIFACTS_PATH/$package_dir" ]; then
                cd $ARTIFACTS_PATH/$package_dir
                package_name=$(basename "$package_dir")

                # Download the cache for the specific package
                pkg_name="node-modules-$(params.target-branch)-$(params.node-version)-$package_name-$checksum"

                echo "Downloading cache for $pkg_name"

                ibmcloud cos download --bucket npm-cache --key $pkg_name $pkg_name.tar.zst
                
                if [ $? -eq 0 ]; then
                  # Decompress and extract the cache
                  echo "Download successful."

                  zstd -d $pkg_name.tar.zst -o "node-modules.tar"
                  tar -xf "node-modules.tar"
                else
                  npmInstall=true
                fi
              fi
            done

            cd $ARTIFACTS_PATH

            echo "npm install: $npmInstall"

            if [ "$npmInstall" == true ]; then
              npm install --loglevel verbose

              rm -rf node-modules.tar.zst
              rm -rf node-modules.tar
            fi

            echo "Restored node_modules cache..."
          else
            ibmcloud cos download --bucket npm-cache --key node-modules-main-$(params.node-version)-$checksum ./node-modules.tar.zst

            if [ $? -eq 0 ]; then
              npmInstall=false
              echo "Download successful. Restoring node_modules cache..."
              
              zstd -d node-modules.tar.zst -o node-modules.tar
              tar -xf node-modules.tar

              # Iterate over packages/*/ directories
              for package_dir in packages/*; do
                if [ -d "$ARTIFACTS_PATH/$package_dir" ]; then
                  cd $ARTIFACTS_PATH/$package_dir

                  package_name=$(basename "$package_dir")

                  # Download the cache for the specific package
                  pkg_name="node-modules-$(params.target-branch)-$(params.node-version)-$package_name-$checksum"
                  echo "Downloading cache for $pkg_name"                
                  ibmcloud cos download --bucket npm-cache --key $pkg_name $pkg_name.tar.zst

                  if [ $? -eq 0 ]; then
                    # Decompress and extract the cache
                    echo "Download successful."
                    zstd -d $pkg_name.tar.zst -o "node-modules.tar"
                    tar -xf "node-modules.tar"
                  else
                    npmInstall=true
                  fi                
                fi
              done

              cd $ARTIFACTS_PATH

              rm -rf node-modules.tar.zst
              rm -rf node-modules.tar

              if [ "$npmInstall" == true ]; then
                npm install --loglevel verbose
              fi

              echo "Restored node_modules cache..."
            else
              echo "Download from main was not successful. Installing node_modules..."
              npm install --loglevel verbose
            fi
          fi
        fi
