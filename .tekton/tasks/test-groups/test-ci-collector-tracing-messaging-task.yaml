apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: test-ci-collector-tracing-messaging
spec:
  sidecars:
    - name: kafka
      image: bitnami/kafka:3.9.0
      env:
        - name: KAFKA_CFG_NODE_ID
          value: "0"
        - name: KAFKA_CFG_PROCESS_ROLES
          value: "controller,broker"
        - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
          value: "0@kafka:9093"
        - name: KAFKA_CFG_LISTENERS
          value: "PLAINTEXT://:9092,CONTROLLER://:9093"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "PLAINTEXT://localhost:9092"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
      readinessProbe:
          tcpSocket:
            port: 9092 
          initialDelaySeconds: 30
          periodSeconds: 2
          timeoutSeconds: 60
    - name: redis
      image: redis:5.0.14
    - name: nats
      image: nats:2.9.14-linux
    - name: nats-streaming
      image: nats-streaming:0.25.3-linux
      args:
          - "-p"
          - "4223"
          - "-m"
          - "8223"
      readinessProbe:
          httpGet:
            path: /healthz 
            port: 8223 
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 15
    - name: nats-streaming-2
      image: nats-streaming:0.25.3-linux
      args:
          - "-p"
          - "4224"
          - "-m"
          - "8224"
      readinessProbe:
          httpGet:
            path: /healthz 
            port: 8224 
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 15
    - name: rabbitmq
      image: rabbitmq:3.7.7
      readinessProbe:
          tcpSocket:
            port: 5672 
          initialDelaySeconds: 7
          periodSeconds: 2
          timeoutSeconds: 60
  envFrom:
    - configMapRef:
        name: environment-properties  
  params:
    - name: node-version
      value: $(params.node-version)
    - name: npm-version
      value: $(params.npm-version)
    - name: repository
      value: $(params.repository)
    - name: revision
      value: $(params.revision)
    - name: continuous-delivery-context-secret
      value: $(params.continuous-delivery-context-secret)
    - name: esm
      value: $(params.esm)
    - name: coverage
      value: $(params.coverage)
    - name: prerelease
      value: $(params.prerelease) 
  workspaces:
    - name: output
      mountPath: /artifacts
  steps:
    - name: run-test-group
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "AWS_ACCESS_KEY_ID"
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "AWS_SECRET_ACCESS_KEY"
        - name: AZURE_REDIS_CLUSTER_PWD
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "AZURE_REDIS_CLUSTER_PWD"              
        - name: DB2_CONNECTION_STR
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "DB2_CONNECTION_STR"
        - name: GOOGLE_APPLICATION_CREDENTIALS_CONTENT
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "GOOGLE_APPLICATION_CREDENTIALS_CONTENT"
        - name: AZURE_SQL_PWD
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "AZURE_SQL_PWD"
        - name: AZURE_STORAGE_ACCOUNT_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: "AZURE_STORAGE_ACCOUNT_KEY"
      image: node:$(params.node-version)
      script: |
        #!/bin/bash
        ARTIFACTS_PATH="$(workspaces.output.path)"
        cd $ARTIFACTS_PATH
        BASE_REVISION=$(git rev-parse origin/main)
        CIRCLE_COMPARE_URL=""
        MODIFIED_FILES=""
        GIT_COMMIT_DESC=""
        if [ "$(params.prerelease)" == "true" ]; then
          source bin/install-prerelease.sh
          echo "Using node: $(node --version)"
        fi
        if [ -n "$(params.npm-version)" ]; then
          npm install npm@$(params.npm-version) -g
        fi
        if [ -n "$(params.revision)" ]; then
          CIRCLE_COMPARE_URL="$(params.repository)/compare/$BASE_REVISION..$(params.revision)"
          MODIFIED_FILES=$(git diff-tree --no-commit-id --name-only -r $(echo ${CIRCLE_COMPARE_URL} | cut -d/ -f 7))
          GIT_COMMIT_DESC=$(git log --format=%B -n 1 $(params.revision))
        fi
        echo "BASE_REVISION: $BASE_REVISION"
        echo "CIRCLE_COMPARE_URL: $CIRCLE_COMPARE_URL"
        echo "MODIFIED_FILES: $MODIFIED_FILES"
        echo "GIT_COMMIT_DESC: $GIT_COMMIT_DESC"
        if echo "$GIT_COMMIT_DESC" | grep -q '\[ci reduced\]' && ! echo "$MODIFIED_FILES" | grep -q "packages/core/src/tracing/instrumentation/messaging"; then
          echo "Skipping group."
          touch "test:ci:collector:tracing:messaging.succeeded"
          exit 0
        fi
        export CI=true
        export GCP_PROJECT="k8s-brewery"
        export AZURE_SQL_USERNAME="admin@instana@nodejs-team-db-server"
        export AZURE_SQL_SERVER="nodejs-team-db-server.database.windows.net"
        export AZURE_REDIS_CLUSTER="team-nodejs-redis-cluster-tekton.redis.cache.windows.net:6380"
        export AZURE_SQL_DATABASE="azure-nodejs-test"
        export AZURE_STORAGE_ACCOUNT_NAME="nodejstracerteam"
        if [ "$(params.esm)" == "true" ]; then
          export RUN_ESM=true
          if ! echo "test:ci:collector:tracing:messaging" | grep -q 'ci:collector'; then
            echo "Skipping tests because groupName does not contain 'ci:collector'."
            touch "test:ci:collector:tracing:messaging.succeeded"
            exit 0
          fi
        fi
        retry=1
        while [ $retry -le 3 ]; do
          if [ "$(params.coverage)" == "true" ]; then
            npm run coverage-ci --npm_command="test:ci:collector:tracing:messaging" --report_dir="test-ci-collector-tracing-messaging"
          else
            npm run "test:ci:collector:tracing:messaging"
          fi          
          if [ $? -eq 0 ]; then
            touch "test:ci:collector:tracing:messaging.succeeded"
            break
          else
            if [ $retry -eq 3 ]; then
              touch "test:ci:collector:tracing:messaging.failed"
              exit 1
            fi
            retry=$((retry + 1))
          fi
        done