function normalizeArgs {
  local instanaLayerMode=$1
  if [[ -z "${instanaLayerMode-}" || $instanaLayerMode = released ]]; then
    instana_layer_without_tag=icr.io/instana/google-cloud-run-nodejs
    INSTANA_LAYER_MODE=released
  elif [[ $instanaLayerMode = authenticated ]]; then
    instana_layer_without_tag=containers.instana.io/instana/release/gcp/run/nodejs
    INSTANA_LAYER_MODE=authenticated
  elif [[ $instanaLayerMode = local ]]; then
    instana_layer_without_tag=instana-google-cloud-run-nodejs-local
    INSTANA_LAYER_MODE=local
  elif [[ $instanaLayerMode = gcr ]]; then
    instana_layer_without_tag=gcr.io/k8s-brewery/cloud-run/nodejs/instana-google-cloud-run-nodejs
    INSTANA_LAYER_MODE=gcr
  else
    echo "Unknown option for Instana layer: $instanaLayerMode"
    exit 1
  fi

  local nodeJsVersion=$2
    ROOT_DIR=$(git rev-parse --show-toplevel)
  local MINIMUM_NODEJS_VERSION=$(getMinimumNodeVersionFromPackageJson)
  if [[ -z "${nodeJsVersion-}" ]]; then
    NVMRC_PATH="$ROOT_DIR/.nvmrc"
    NODEJS_VERSION=$(cat "$NVMRC_PATH")

    # Used for local runtime simulator only.
    LAMBDA_BASE_IMAGE=public.ecr.aws/lambda/nodejs:${NODEJS_VERSION%.*}
  else
      if ! printf "%s\n%s" "$MINIMUM_NODEJS_VERSION" "$nodeJsVersion" | sort -C -V; then
        echo "Unsupported Node.js version: $nodeJsVersion. Minimum required: $MINIMUM_NODEJS_VERSION."
        exit 1
    fi
      NODEJS_VERSION=$nodeJsVersion
  fi

  local distribution=$3
  if [[ -z "${distribution-}" || $distribution = standard ]]; then
    LINUX_DISTRIBUTION=standard
  elif [[ $distribution = alpine ]]; then
    LINUX_DISTRIBUTION=alpine
  else
    echo "Unknown option for Linux distribution: $distribution"
    exit 1
  fi

  local docker_tag=$4
  if [[ -n "${docker_tag-}" ]]; then
    DOCKER_TAG=$docker_tag
  else
    DOCKER_TAG=latest
  fi
  INSTANA_LAYER=$instana_layer_without_tag:$DOCKER_TAG
}

function setImageTag {
  local prefix=$1

  local nodeJsVersion=$2

  local distribution=$3
  if [[ $distribution = standard ]]; then
    distribution=""
  elif [[ $distribution = alpine ]]; then
    distribution=-alpine
  else
    echo "Unknown option for Linux distribution: $distribution"
    exit 1
  fi

  local instanaLayerMode=$4

  local docker_tag=$5

  image_tag=$prefix-$nodeJsVersion$distribution-$instanaLayerMode:$docker_tag
}

function setContainerName {
  local prefix=$1

  local nodeJsVersion=$2

  local distribution=$3
  if [[ $distribution = standard ]]; then
    distribution=""
  elif [[ $distribution = alpine ]]; then
    distribution=-alpine
  else
    echo "Unknown option for Linux distribution: $distribution"
    exit 1
  fi

  local instanaLayerMode=$4

  local docker_tag=$5

  container_name=$prefix-$nodeJsVersion$distribution-$instanaLayerMode-$docker_tag
}
function getMinimumNodeVersionFromPackageJson {
  local package_json_path="$ROOT_DIR/package.json"
  if [[ -f "$package_json_path" ]]; then
    MINIMUM_NODEJS_VERSION=$(grep '"node":' "$package_json_path" | awk -F '"' '{print $4}' | sed 's/^>=//; s/\..*//')
    echo "$MINIMUM_NODEJS_VERSION"
  else
    echo "Could not find package.json in $ROOT_DIR"
    exit 1
  fi
}