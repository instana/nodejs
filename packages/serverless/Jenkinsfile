#!groovy

AWS_FARGATE_ROOT_PATH = 'packages/aws-fargate'
AWS_FARGATE_PACKAGE_JSON_FILE = "${AWS_FARGATE_ROOT_PATH}/package.json"
GOOGLE_CLOUD_RUN_ROOT_PATH = 'packages/google-cloud-run'
GOOGLE_CLOUD_RUN_PACKAGE_JSON_FILE = "${GOOGLE_CLOUD_RUN_ROOT_PATH}/package.json"
AWS_LAMBDA_WRAPPER_ROOT_PATH = 'packages/aws-lambda-auto-wrap'
AWS_LAMBDA_WRAPPER_PACKAGE_JSON_FILE = "${AWS_LAMBDA_WRAPPER_ROOT_PATH}/package.json"

node {

  def localAwsFargatePackageVersion
  def publishedAwsFargatePackageVersion
  def fargateDockerImageLayerNeedsToBeReleased

  def localGoogleCloudRunPackageVersion
  def publishedGoogleCloudRunPackageVersion
  def cloudRunDockerImageLayerNeedsToBeReleased

  def localAwsLambdaLayerPackageVersion
  def publishedAwsLambdaLayerPackageVersion
  def lambdaLayerNeedsToBeReleased

  stage ('Checkout Git Repo') {
    deleteDir()
    checkout scm
  }

  stage ('Identify versions of published artefacts') {
    localAwsFargatePackageVersion = getLocalPackageVersion(AWS_FARGATE_PACKAGE_JSON_FILE)
    publishedAwsFargatePackageVersion = getPublishedDockerImageLayerPackageVersion('aws-fargate-nodejs')

    localGoogleCloudRunPackageVersion = getLocalPackageVersion(GOOGLE_CLOUD_RUN_PACKAGE_JSON_FILE)
    publishedGoogleCloudRunPackageVersion = getPublishedDockerImageLayerPackageVersion('google-cloud-run-nodejs')

    localAwsLambdaLayerPackageVersion = getLocalPackageVersion(AWS_LAMBDA_WRAPPER_PACKAGE_JSON_FILE)
    publishedAwsLambdaLayerPackageVersion = getPublishedAwsLambdaLayerPackageVersion()

    currentBuild.displayName = "#${BUILD_NUMBER}:${publishedAwsFargatePackageVersion}:${localAwsFargatePackageVersion}"
  }

  stage ('Trigger downstream build jobs') {
    triggerFargateJob(publishedAwsFargatePackageVersion, localAwsFargatePackageVersion)
    triggerCloudRunJob(publishedGoogleCloudRunPackageVersion, localGoogleCloudRunPackageVersion)
    triggerLambdaJob(publishedAwsLambdaLayerPackageVersion, localAwsLambdaLayerPackageVersion)
  }
}

def getLocalPackageVersion(packageJsonFile) {
  def packageJsonObject = readJSON file: packageJsonFile
  assert packageJsonObject instanceof Map
  assert packageJsonObject.version instanceof String
  return packageJsonObject.version
}

def getPublishedDockerImageLayerPackageVersion(name) {
  return sh(returnStdout: true, script: "curl https://registry.hub.docker.com/v1/repositories/instana/${name}/tags | jq -r '.[].name' | sort -r | head -n2 | tail -n1").trim()
}

def getPublishedAwsLambdaLayerPackageVersion() {
   def description = sh(returnStdout: true, script: "aws lambda list-layer-versions --layer-name instana-nodejs --max-items 1 --output json | jq .LayerVersions\\[0\\].Description").trim()
   println "Parsing version from AWS Lambda layer description: ${description}"
   def matcher = description =~ '.*\\(@instana/aws-lambda@(?<version>\\d+\\.\\d+\\.\\d+)\\).*'
   if (matcher.matches()) {
     return matcher.group("version")
   }
   return null;
}

def triggerFargateJob(publishedAwsFargatePackageVersion, localAwsFargatePackageVersion) {
  println "Checking if a new AWS Fargate Docker image layer needs to be published. Local package version: ${localAwsFargatePackageVersion} – package version in published AWS Fargate Docker image layer: ${publishedAwsFargatePackageVersion}."
  if (localAwsFargatePackageVersion != publishedAwsFargatePackageVersion) {
     println "Versions are different, triggering the job to publish the latest package version for AWS Fargate."
     build job: 'aws-fargate-nodejs'
  } else {
     println "Versions are identical, doing nothing."
  }
}

def triggerCloudRunJob(publishedGoogleCloudRunPackageVersion, localGoogleCloudRunPackageVersion) {
  println "Checking if a new Google Cloud Run Docker image layer needs to be published. Local package version: ${localGoogleCloudRunPackageVersion} – package version in published Google Cloud Run Docker image layer: ${publishedGoogleCloudRunPackageVersion}."
  if (localGoogleCloudRunPackageVersion != publishedGoogleCloudRunPackageVersion) {
     println "Versions are different, triggering the job to publish the latest package version for Google Cloud Run."
     build job: 'google-cloud-run-nodejs'
  } else {
     println "Versions are identical, doing nothing."
  }
}

def triggerLambdaJob(publishedAwsLambdaLayerPackageVersion, localAwsLambdaLayerPackageVersion) {
  println "Checking if a new AWS Lambda layer needs to be published. Local package version: ${localAwsLambdaLayerPackageVersion} – package version in published AWS Lambda layer: ${publishedAwsLambdaLayerPackageVersion}."
  if (localAwsLambdaLayerPackageVersion != publishedAwsLambdaLayerPackageVersion) {
     println "Versions are different, triggering the job to publish the latest package version for AWS Lambda."
     build job: 'aws-lambda-nodejs'
  } else {
     println "Versions are identical, doing nothing."
  }
}

