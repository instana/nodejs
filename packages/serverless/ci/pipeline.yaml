---

resources:

  - name: nodejs-repository
    type: git
    icon: github
    source:
      uri: https://github.com/instana/nodejs.git
      branch: ((branch))
      username: ((instanacd-github-api-token))
      password: x-oauth-basic

  - name: nodejs-repository-dind
    type: git
    icon: github
    source:
      uri: https://github.com/instana/nodejs.git
      branch: ((branch))
      username: ((instanacd-github-api-token))
      password: x-oauth-basic
      paths:
      - packages/serverless/ci/dind-nodejs-aws-jq

  - name: dind-nodejs-aws-jq-image
    type: registry-image
    icon: docker
    source:
      repository: gcr.io/k8s-brewery/instana/concourse-dind-nodejs-aws-jq
      tag: latest
      username: _json_key
      password: ((team-nodejs-gcp-service-account-json))

  - name: instana-aws-fargate-npm-package
    type: npm-resource
    icon: cube-outline
    source:
      scope: instana
      package: aws-fargate
      registry:
        uri: https://registry.npmjs.org/

  - name: aws-fargate-nodejs-image-icr
    type: registry-image
    icon: docker
    source:
      repository: icr.io/instana/aws-fargate-nodejs
      username: ((concourse-icr-containers-public.apikey))
      password: ((concourse-icr-containers-public.password))
      tag: latest

  - name: aws-fargate-nodejs-image-containers-instana-io
    type: registry-image
    icon: docker
    source:
      # We push to delivery.instana.io/rel-docker-agent-local/agent/.... The redirect proxy for containers.instana.io
      # will make the container image available as
      #   containers.instana.io/instana/release/aws/fargate/nodejs
      # by redirecting to
      #   delivery.instana.io/rel-docker-agent-local/agent/fargate/aws/nodejs
      repository: delivery.instana.io/rel-docker-agent-local/agent/aws/fargate/nodejs
      username: ((delivery-instana-io-release-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-release-project-artifact-read-writer-creds.password))
      tag: latest

  - name: instana-google-cloud-run-npm-package
    type: npm-resource
    icon: cube-outline
    source:
      scope: instana
      package: google-cloud-run
      registry:
        uri: https://registry.npmjs.org/

  - name: google-cloud-run-nodejs-image-icr
    type: registry-image
    icon: docker
    source:
      repository: icr.io/instana/google-cloud-run-nodejs
      username: ((concourse-icr-containers-public.apikey))
      password: ((concourse-icr-containers-public.password))
      tag: latest

  - name: google-cloud-run-nodejs-image-containers-instana-io
    type: registry-image
    icon: docker
    source:
      # We push to delivery.instana.io/rel-docker-agent-local/agent/.... The redirect proxy for containers.instana.io
      # will make the container image available as
      #   containers.instana.io/instana/release/google/cloud-run/nodejs
      # by redirecting to
      #   delivery.instana.io/rel-docker-agent-local/agent/google/cloud-run/nodejs
      repository: delivery.instana.io/rel-docker-agent-local/agent/google/cloud-run/nodejs
      username: ((delivery-instana-io-release-project-artifact-read-writer-creds.username))
      password: ((delivery-instana-io-release-project-artifact-read-writer-creds.password))
      tag: latest

  - name: instana-aws-lambda-npm-package
    type: npm-resource
    icon: cube-outline
    source:
      scope: instana
      package: aws-lambda
      registry:
        uri: https://registry.npmjs.org/

  - name: slack-alert
    type: slack-notification
    icon: slack
    source:
      url: ((team-nodejs-slack-hook))

  - name: instana-azure-container-services-npm-package
    type: npm-resource
    icon: cube-outline
    source:
      scope: instana
      package: azure-container-services
      registry:
        uri: https://registry.npmjs.org/

  - name: azure-container-services-nodejs-image-icr
    type: registry-image
    icon: docker
    source:
      repository: icr.io/instana/azure-container-services-nodejs
      username: ((concourse-icr-containers-public.apikey))
      password: ((concourse-icr-containers-public.password))
      tag: latest

resource_types:

  - name: npm-resource
    type: registry-image
    source:
      repository: timotto/concourse-npm-resource
      tag: latest

  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: latest


jobs:

  - name: self-update
    max_in_flight: 1
    plan:
      - get: nodejs-repository
        trigger: true
      - set_pipeline: self
        file: nodejs-repository/packages/serverless/ci/pipeline.yaml
        vars:
          branch: ((branch))

  - name: aws-fargate-nodejs-container-image-layer
    serial: true
    plan:
      - in_parallel:
        - get: instana-aws-fargate-npm-package
          trigger: true
          params:
            skip_download: true
        - get: nodejs-repository
          passed:
          - self-update

      - load_var: package-version
        file: instana-aws-fargate-npm-package/version
        reveal: true

      - load_var: nodejs-version
        file: nodejs-repository/.nvmrc
        reveal: true

      - task: build-and-publish-fargate-image
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
              tag: latest
          params:
            CONTEXT: nodejs-repository/packages/aws-fargate/images/instana-aws-fargate/
            DOCKERFILE: nodejs-repository/packages/aws-fargate/images/instana-aws-fargate/Dockerfile-npm
            BUILD_ARG_package_version: ((.:package-version))
            BUILD_ARG_NODEJS_VERSION: ((.:nodejs-version))
          inputs:
            - name: nodejs-repository
          outputs:
            - name: image
          run:
            path: build

      - put: aws-fargate-nodejs-image-icr
        params:
          image: image/image.tar
          additional_tags: instana-aws-fargate-npm-package/version
        get_params:
          skip_download: true

      - put: aws-fargate-nodejs-image-containers-instana-io
        params:
          image: image/image.tar
          additional_tags: instana-aws-fargate-npm-package/version
        get_params:
          skip_download: true

    on_success:
      put: slack-alert
      params:
        channel: '#team-node'
        icon_emoji: ':white_check_mark:'
        text: |
              :white_check_mark: Version ((.:package-version)) build with ((.:nodejs-version)) of the container image `instana/aws-fargate-nodejs` has been pushed to the IBM Container registry `icr.io` as well as `delivery.instana.io`/`containers.instana.io`.
        attachments: &slack-alert-attachements-success
          - color: '#00ff00'
            fields:
              - title: 'Job'
                value: $BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME
                short: true
              - title: 'Build'
                value: $BUILD_NAME
                short: true
            footer: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
            footer_icon: https://ci.concourse-ci.org/public/images/favicon-succeeded.png
    on_failure: &slack-notify-failure-fargate
      put: slack-alert
      params:
        channel: '#team-node'
        icon_emoji: ':check-failed:'
        text: |
              :x: Building/pushing a new version of the container image `instana/aws-fargate-nodejs` has failed.
        attachments: &slack-alert-attachements-failure
          - color: '#ff0000'
            fields:
              - title: 'Job'
                value: $BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_AME
                short: true
              - title: 'Build'
                value: $BUILD_NAME
                short: true
            footer: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
            footer_icon: https://ci.concourse-ci.org/public/images/favicon-failed.png
    on_error: *slack-notify-failure-fargate


  - name: google-cloud-run-nodejs-container-image-layer
    serial: true
    plan:
      - in_parallel:
        - get: instana-google-cloud-run-npm-package
          trigger: true
          params:
            skip_download: true
        - get: nodejs-repository
          passed:
          - self-update

      - load_var: package-version
        file: instana-google-cloud-run-npm-package/version
        reveal: true

      - load_var: nodejs-version
        file: nodejs-repository/.nvmrc
        reveal: true

      - task: build-and-publish-google-cloud-run-image
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
              tag: latest
          params:
            CONTEXT: nodejs-repository/packages/google-cloud-run/images/instana-google-cloud-run/
            DOCKERFILE: nodejs-repository/packages/google-cloud-run/images/instana-google-cloud-run/Dockerfile-npm
            BUILD_ARG_package_version: ((.:package-version))
            BUILD_ARG_NODEJS_VERSION: ((.:nodejs-version))
          inputs:
            - name: nodejs-repository
          outputs:
            - name: image
          run:
            path: build

      - put: google-cloud-run-nodejs-image-icr
        params:
          image: image/image.tar
          additional_tags: instana-google-cloud-run-npm-package/version
        get_params:
          skip_download: true

      - put: google-cloud-run-nodejs-image-containers-instana-io
        params:
          image: image/image.tar
          additional_tags: instana-google-cloud-run-npm-package/version
        get_params:
          skip_download: true

    on_success:
      put: slack-alert
      params:
        channel: '#team-node'
        icon_emoji: ':white_check_mark:'
        text: |
              :white_check_mark: Version ((.:package-version)) build with ((.:nodejs-version)) of the container image `instana/google-cloud-run-nodejs` has been pushed to the IBM Container registry `icr.io` as well as `delivery.instana.io`/`containers.instana.io`.
        attachments: *slack-alert-attachements-success
    on_failure: &slack-notify-failure-cloud-run
      put: slack-alert
      params:
        channel: '#team-node'
        icon_emoji: ':check-failed:'
        text: |
              :x: Building/pushing a new version of the container image `instana/google-cloud-run-nodejs` has failed.
        attachments: *slack-alert-attachements-failure
    on_error: *slack-notify-failure-cloud-run


  # Builds the docker-in-docker image with the AWS cli and jq, which we use to assemble and publish the
  # Instana AWS Lambda layer.
  - name: build-and-publish-dind-nodejs-aws-jq-image
    serial: true
    plan:

      - get: nodejs-repository-dind
        params: { depth: 1 }
        trigger: true

      - task: build-image
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
              tag: '0.8.0'
          inputs:
            - name: nodejs-repository-dind
          params:
            CONTEXT: nodejs-repository-dind/packages/serverless/ci/dind-nodejs-aws-jq
          caches:
          - path: cache
          run:
            path: build
          outputs:
            - name: image
        output_mapping:
          image: dind-image

      - put: dind-nodejs-aws-jq-image
        params:
          image: dind-image/image.tar
        get_params:
          skip_download: true


  - name: aws-lambda-layer-and-container-image
    serial: true
    plan:
      - in_parallel:
        - get: dind-nodejs-aws-jq-image
        - get: instana-aws-lambda-npm-package
          trigger: true
          params:
            skip_download: true
        - get: nodejs-repository
          passed:
          - self-update

      - load_var: package-version
        file: instana-aws-lambda-npm-package/version
        reveal: true
      
      - in_parallel:
        - task: build-and-publish-aws-lambda-layer-and-image-x86_64
          privileged: true
          image: dind-nodejs-aws-jq-image
          config:
            platform: linux
            inputs:
              - name: nodejs-repository
            run:
              path: entrypoint.sh
              args:
              - bash
              - -ceux
              - |
                  BUILD_LAYER_WITH=npm \
                  NO_PROMPT=true \
                  CONTAINER_REGISTRY_USER=iamapikey \
                  CONTAINER_REGISTRY_PASSWORD=((concourse-icr-containers-public.password)) \
                  AWS_ACCESS_KEY_ID=((aws-ci-manage-lambda-layers.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY=((aws-ci-manage-lambda-layers.aws_secret_access_key)) \
                  AWS_ACCESS_KEY_ID_CHINA=((aws-ci-manage-lambda-layers-china.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY_CHINA=((aws-ci-manage-lambda-layers-china.aws_secret_access_key)) \
                  nodejs-repository/packages/aws-lambda/layer/bin/publish-layer.sh
          on_success:
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':white_check_mark:'
              text: |
                    :white_check_mark: The AWS Lambda layer deployment for the Instana Node.js package version ((.:package-version)) has been successfully deployed to all the *non-cn* regions (x86_64 architecture).
              attachments: *slack-alert-attachements-success
          on_failure: &slack-notify-failure-lambda
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':check-failed:'
              text: |
                    :x: The AWS Lambda layer deployment for the Instana Node.js package version ((.:package-version)) has failed while publishing to *non-cn* regions (x86_64 architecture).
              attachments: *slack-alert-attachements-failure
          on_error: *slack-notify-failure-lambda

        - task: build-and-publish-aws-lambda-layer-and-image-arm64
          privileged: true
          image: dind-nodejs-aws-jq-image
          config:
            platform: linux
            inputs:
              - name: nodejs-repository
            run:
              path: entrypoint.sh
              args:
              - bash
              - -ceux
              - |
                  BUILD_LAYER_WITH=npm \
                  NO_PROMPT=true \
                  LAMBDA_ARCHITECTURE=arm64 \
                  CONTAINER_REGISTRY_USER=iamapikey \
                  CONTAINER_REGISTRY_PASSWORD=((concourse-icr-containers-public.password)) \
                  AWS_ACCESS_KEY_ID=((aws-ci-manage-lambda-layers.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY=((aws-ci-manage-lambda-layers.aws_secret_access_key)) \
                  AWS_ACCESS_KEY_ID_CHINA=((aws-ci-manage-lambda-layers-china.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY_CHINA=((aws-ci-manage-lambda-layers-china.aws_secret_access_key)) \
                  nodejs-repository/packages/aws-lambda/layer/bin/publish-layer.sh
          on_success:
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':white_check_mark:'
              text: |
                    :white_check_mark: The AWS Lambda layer deployment for the Instana Node.js package version ((.:package-version)) has been successfully deployed to all the *non-cn* regions (arm64 architecture).
              attachments: *slack-alert-attachements-success
          on_failure: &slack-notify-failure-lambda
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':check-failed:'
              text: |
                    :x: The AWS Lambda layer deployment for the Instana Node.js package version ((.:package-version)) has failed while publishing to *non-cn* regions (arm64 architecture).
              attachments: *slack-alert-attachements-failure
          on_error: *slack-notify-failure-lambda

        - task: build-and-publish-aws-lambda-layer-and-image-china-x86_64
          privileged: true
          image: dind-nodejs-aws-jq-image
          config:
            platform: linux
            inputs:
              - name: nodejs-repository
            run:
              path: entrypoint.sh
              args:
              - bash
              - -ceux
              - |
                  BUILD_LAYER_WITH=npm \
                  NO_PROMPT=true \
                  PUBLISH_TO_CHINA_REGIONS=true \
                  CONTAINER_REGISTRY_USER=iamapikey \
                  CONTAINER_REGISTRY_PASSWORD=((concourse-icr-containers-public.password)) \
                  AWS_ACCESS_KEY_ID=((aws-ci-manage-lambda-layers.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY=((aws-ci-manage-lambda-layers.aws_secret_access_key)) \
                  AWS_ACCESS_KEY_ID_CHINA=((aws-ci-manage-lambda-layers-china.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY_CHINA=((aws-ci-manage-lambda-layers-china.aws_secret_access_key)) \
                  nodejs-repository/packages/aws-lambda/layer/bin/publish-layer.sh
          on_success:
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':white_check_mark:'
              text: |
                    :white_check_mark: The AWS Lambda layer for the Instana Node.js package version ((.:package-version)) has been successfully deployed to the *cn* regions (x86_64 architecture).
              attachments: *slack-alert-attachements-success
          on_failure: &slack-notify-failure-lambda
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':check-failed:'
              text: |
                    :x: The AWS Lambda layer deployment for the Instana Node.js package version ((.:package-version)) has failed while publishing to the *cn* regions (x86_64 architecture).
              attachments: *slack-alert-attachements-failure
          on_error: *slack-notify-failure-lambda

        - task: build-and-publish-aws-lambda-layer-and-image-china-arm64
          privileged: true
          image: dind-nodejs-aws-jq-image
          config:
            platform: linux
            inputs:
              - name: nodejs-repository
            run:
              path: entrypoint.sh
              args:
              - bash
              - -ceux
              - |
                  BUILD_LAYER_WITH=npm \
                  NO_PROMPT=true \
                  LAMBDA_ARCHITECTURE=arm64 \
                  PUBLISH_TO_CHINA_REGIONS=true \
                  CONTAINER_REGISTRY_USER=iamapikey \
                  CONTAINER_REGISTRY_PASSWORD=((concourse-icr-containers-public.password)) \
                  AWS_ACCESS_KEY_ID=((aws-ci-manage-lambda-layers.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY=((aws-ci-manage-lambda-layers.aws_secret_access_key)) \
                  AWS_ACCESS_KEY_ID_CHINA=((aws-ci-manage-lambda-layers-china.aws_access_key_id)) \
                  AWS_SECRET_ACCESS_KEY_CHINA=((aws-ci-manage-lambda-layers-china.aws_secret_access_key)) \
                  nodejs-repository/packages/aws-lambda/layer/bin/publish-layer.sh
          on_success:
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':white_check_mark:'
              text: |
                    :white_check_mark: The AWS Lambda layer for the Instana Node.js package version ((.:package-version)) has been successfully deployed to the *cn* regions (arm64 architecture).
              attachments: *slack-alert-attachements-success
          on_failure: &slack-notify-failure-lambda
            put: slack-alert
            params:
              channel: '#team-node'
              icon_emoji: ':check-failed:'
              text: |
                    :x: The AWS Lambda layer deployment for the Instana Node.js package version ((.:package-version)) has failed while publishing to the *cn* regions (arm64 architecture).
              attachments: *slack-alert-attachements-failure
          on_error: *slack-notify-failure-lambda

  - name: azure-container-services-nodejs-container-image-layer
    serial: true
    plan:
      - in_parallel:
        - get: instana-azure-container-services-npm-package
          trigger: true
          params:
            skip_download: true
        - get: nodejs-repository
          passed:
          - self-update

      - load_var: package-version
        file: instana-azure-container-services-npm-package/version
        reveal: true

      - load_var: nodejs-version
        file: nodejs-repository/.nvmrc
        reveal: true

      - task: build-and-publish-azure-container-services-image
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: vito/oci-build-task
              tag: latest
          params:
            CONTEXT: nodejs-repository/packages/azure-container-services/images/instana-azure-container-services/
            DOCKERFILE: nodejs-repository/packages/azure-container-services/images/instana-azure-container-services/Dockerfile-npm
            BUILD_ARG_package_version: ((.:package-version))
            BUILD_ARG_NODEJS_VERSION: ((.:nodejs-version))
          inputs:
            - name: nodejs-repository
          outputs:
            - name: image
          run:
            path: build

      - put: azure-container-services-nodejs-image-icr
        params:
          image: image/image.tar
          additional_tags: instana-azure-container-services-npm-package/version
        get_params:
          skip_download: true

    on_success:
      put: slack-alert
      params:
        channel: '#team-node'
        icon_emoji: ':white_check_mark:'
        text: |
              :white_check_mark: Version ((.:package-version)) build with ((.:nodejs-version)) of the container image `instana/azure-container-services-nodejs` has been pushed to the IBM Container registry `icr.io` as well as `delivery.instana.io`/`containers.instana.io`.
        attachments: *slack-alert-attachements-success
    on_failure: &slack-notify-failure-azure-container-services
      put: slack-alert
      params:
        channel: '#team-node'
        icon_emoji: ':check-failed:'
        text: |
              :x: Building/pushing a new version of the container image `instana/azure-container-services-nodejs` has failed.
        attachments: *slack-alert-attachements-failure
    on_error: *slack-notify-failure-azure-container-services
