function normalizeArgs {
  local instanaLayerMode=$1
  if [[ -z "${instanaLayerMode-}" || $instanaLayerMode = released ]]; then
    INSTANA_LAYER=icr.io/instana/aws-lambda-nodejs:latest
    INSTANA_LAYER_MODE=released
  elif [[ $instanaLayerMode = local ]]; then
    INSTANA_LAYER=instana-aws-lambda-nodejs-local
    INSTANA_LAYER_MODE=local
  else
    echo "Unknown option for Instana layer: $instanaLayerMode"
    exit 1
  fi

  local nodeJsVersion=$2
  ROOT_DIR=$(git rev-parse --show-toplevel)
  local MINIMUM_NODEJS_VERSION=$(getMinimumNodeVersionFromPackageJson)
  if [[ -z "${nodeJsVersion-}" ]]; then
    NVMRC_PATH="$ROOT_DIR/.nvmrc"
    NODEJS_VERSION=$(cat "$NVMRC_PATH")

    # Used for local runtime simulator only.
    LAMBDA_BASE_IMAGE=public.ecr.aws/lambda/nodejs:${NODEJS_VERSION%.*}
    else
      if ! printf "%s\n%s" "$MINIMUM_NODEJS_VERSION" "$nodeJsVersion" | sort -C -V; then
        echo "Unsupported Node.js version: $nodeJsVersion. Minimum required: $MINIMUM_NODEJS_VERSION."
        exit 1
    fi
      NODEJS_VERSION=$nodeJsVersion
  fi
}

function setImageTag {
  local prefix=$1
  local nodeJsVersion=$2
  local instanaLayerMode=$3
  image_tag=$prefix-$nodeJsVersion-$instanaLayerMode
}

function setContainerName {
  local prefix=$1
  local nodeJsVersion=$2
  local instanaLayerMode=$3
  container_name=$prefix-$nodeJsVersion-$instanaLayerMode
}
function getMinimumNodeVersionFromPackageJson {
  local package_json_path="$ROOT_DIR/package.json"
  if [[ -f "$package_json_path" ]]; then
    MINIMUM_NODEJS_VERSION=$(grep '"node":' "$package_json_path" | awk -F '"' '{print $4}' | sed 's/^>=//; s/\..*//')
    echo "$MINIMUM_NODEJS_VERSION"
  else
    echo "Could not find package.json in $ROOT_DIR"
    exit 1
  fi
}
