function createZip {
  name=${PWD##*/}
  echo "creating $name.zip"
  rm -f $name.zip
  mkdir -p ../zip
  rm -f ../zip/$name.zip
  rm -rf node_modules

  if [[ ! -e .dont-add-instana  ]]; then

    # No matter how we build the zip file, we need to modifiy the package.json, so we create a backup copy to be able to
    # revert that modification later. Also, we do not want a modified package-lock.json show up in git diff all the
    # time.
    cp package.json package.json.backup
    cp package-lock.json package-lock.json.backup

    if [[ "${BUILD_LAMBDAS_WITH-}" == "layer" ]]; then
      # We want to use the lambda layer and not the locally build npm package tar file.
      # If the lambda's package.json currently contains a dependency to the local tar files, like:
      # "dependencies": {
      #   "@instana/serverless": "file:../../instana-serverless.tgz",
      #   "@instana/aws-lambda": "file:../../instana-aws-lambda.tgz",
      #   "instana-aws-lambda-auto-wrap": "file:../../instana-aws-lambda-auto-wrap.tgz"
      # }
      # ...then those need to be removed:
      npm uninstall --production -S @instana/aws-lambda
      npm uninstall --production -S @instana/serverless
      npm uninstall --production -S instana-aws-lambda-auto-wrap

    elif [[ "${BUILD_LAMBDAS_WITH-}" == "local" ]]; then
      # The lambda's package.json might or might not already have a dependency to the local tar files:
      # "dependencies": {
      #   "@instana/aws-lambda": "file:../../instana-aws-lambda.tgz",
      #   ...
      # }
      # but only doing an npm install will use a stale copy of the tgz files from npm's cache, so we force npm to use a
      # fresh copy by installing the tgz files again explicitly.
      npm --loglevel=warn --production install -S "file:../../instana-serverless.tgz"
      npm --loglevel=warn --production install -S "file:../../instana-aws-lambda.tgz"
      npm --loglevel=warn --production install -S "file:../../instana-aws-lambda-auto-wrap.tgz"

    elif [[ "${BUILD_LAMBDAS_WITH-npm}" == "npm" ]]; then
      # The lambda's package.json might or might not already have a dependency to the local tar files:
      # "dependencies": {
      #   "@instana/serverless": "file:../../instana-serverless.tgz",
      #   "@instana/aws-lambda": "file:../../instana-aws-lambda.tgz"
      # }
      # this needs to be removed and then we install the latest published package from npm
      npm uninstall --production -S @instana/aws-lambda
      npm uninstall --production -S @instana/serverless
      npm install --production -S @instana/aws-lambda
    else
      echo "Unknown option for BUILD_LAMBDAS_WITH: $BUILD_LAMBDAS_WITH"
      echo Aborting.
      exit 1
    fi
  else
    echo "Not adding @instana/aws-lambda package to zip for \"$name\" (found a .dont-add-instana file)."
  fi

  # Now install everything else.
  npm --loglevel=warn --production install

  # And create the zip file that can be deployed to AWS.
  zip -qr $name . -x bin/*.sh -x \*.swp
  mv $name.zip ../zip

  if [[ ! -e .dont-add-instana  ]]; then
    # revert package.json modification
    mv package.json.backup package.json
    mv package-lock.json.backup package-lock.json
  fi
}

