version: '2'
services:
  redis:
    image: redis:5.0.14
    ports:
      - 6379:6379

  redis-node-0:
    image: docker.io/bitnami/redis-cluster:7.2
    environment:
      - 'ALLOW_EMPTY_PASSWORD=yes'
      - 'REDIS_NODES=172.30.0.2:6379 172.30.0.3:6379 172.30.0.4:6379'
      - 'REDIS_CLUSTER_CREATOR=yes'
      - 'REDIS_CLUSTER_REPLICAS=0'
      - 'BITNAMI_DEBUG=1'
      - 'REDIS_CLUSTER_SLEEP_BEFORE_DNS_LOOKUP=10'
    ports:
      - 6380:6379
    networks:
      redis-cluster-network:
        ipv4_address: 172.30.0.2

  redis-node-1:
    image: docker.io/bitnami/redis-cluster:7.2
    environment:
      - 'ALLOW_EMPTY_PASSWORD=yes'
      - 'REDIS_NODES=172.30.0.2:6379 172.30.0.3:6379 172.30.0.4:6379'
    ports:
      - 6381:6379
    networks:
      redis-cluster-network:
        ipv4_address: 172.30.0.3      

  redis-node-2:
    image: docker.io/bitnami/redis-cluster:7.2
    environment:
      - 'ALLOW_EMPTY_PASSWORD=yes'
      - 'REDIS_NODES=172.30.0.2:6379 172.30.0.3:6379 172.30.0.4:6379'
    ports:
      - 6382:6379
    networks:
      redis-cluster-network:
        ipv4_address: 172.30.0.4      

  mongo:
    image: mongo:4.1.13
    ports:
      - 27017:27017

  couchbase:
    image: couchbase/server:7.1.4
    hostname: couchbase
    ports:
      - '8091-8096:8091-8096'
      - '11210:11210'

  # Elasticsearch 7 compatible with client v7
  # elasticsearch:
  #  image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
  #  ports:
  #    - 9200:9200
  #  environment:
  #    discovery.type: single-node
  #    ES_JAVA_OPTS: "-Xms500m -Xmx500m"

  # Elasticsearch 8 compatible with client v7 & v8
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.1
    ports:
      - 9200:9200
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms500m -Xmx500m"
      xpack.security.enabled: 'false'
  kafka:
    image: bitnami/kafka:3.9.0
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes

  mysql:
    image: mysql:8.0.26
    platform: linux/amd64
    ports:
      - 3306:3306
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: nodepw
      MYSQL_DATABASE: nodedb
      MYSQL_USER: node
      MYSQL_PASSWORD: nodepw
      MYSQL_ROOT_HOST: 0.0.0.0
    volumes:
      - ./packages/collector/test/tracing/database/mysql/conf.d:/etc/mysql/conf.d

  postgres:
    image: postgres:10.5
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: node
      POSTGRES_PASSWORD: nodepw
      POSTGRES_DB: nodedb

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-RC1-ubuntu-20.04
    platform: linux/amd64
    ports:
      - 1433:1433
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: stanCanHazMsSQL1
      MSSQL_PID: Express

  rabbitmq:
    image: rabbitmq:3.7.8-alpine
    ports:
      - 5671:5671
      - 5672:5672

  nats:
    image: nats:2.9.14-linux
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222

  nats-streaming:
    image: nats-streaming:0.25.3-linux
    command: -p 4223 -m 8223
    ports:
      - 4223:4223
      - 8223:8223

  memcached:
    image: memcached:1.6.9
    ports:
      - 11211:11211

  # https://hub.docker.com/r/ibmcom/db2
  db2:
    image: ibmcom/db2
    platform: linux/amd64
    privileged: true
    ports:
      - 58885:50000
    environment:
      - PERSISTENT_HOME=false
      - DBNAME=nodedb
      - BLU=false
      - HADR_ENABLED=false
      - ENABLE_ORACLE_COMPATIBILITY=false
      - UPDATEAVAIL=NO
      - SAMPLEDB=false
      - REPODB=false
      - IS_OSXFS=false
      - LICENSE=accept
      - DB2INSTANCE=node
      - DB2INST1_PASSWORD=nodepw
      - DB2_CREATE_DB_ON_PATH=true
      - STARTUP_MODE=restoreIfNotExists
    volumes:
       - ./db2/database:/database
       - ./db2/db2_data:/db2_data

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:latest
    hostname: localstack
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # external services port range
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock 
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

networks:
  redis-cluster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16