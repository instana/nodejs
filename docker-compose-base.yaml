version: '2'
services:
  oracledb:
    image: gvenzl/oracle-free:23-slim
    container_name: oracle-free
    ports:
      - "1521:1521"
      - "8080:8080"
    environment:
      ORACLE_PASSWORD: teamnodejstest
      APP_USER: teamnodejs
      APP_USER_PASSWORD: teamnodejspassword

  redis:
    image: redis:7.4.3
    ports:
      - 6379:6379

 # sentinel test setup
  redis-slave:
    image: redis:7.4.3
    network_mode: host
    command:
      [
        'redis-server',
        '--replicaof',
        '127.0.0.1',
        '6379',
        '--port',
        '6380',
      ]

  redis-sentinel:
    image: redis:7.4.3
    network_mode: host
    command: >
      sh -c 'echo "sentinel monitor mymaster 127.0.0.1 6379 1" > /etc/sentinel.conf &&
            echo "sentinel down-after-milliseconds mymaster 1000" >> /etc/sentinel.conf &&
            echo "sentinel failover-timeout mymaster 5000" >> /etc/sentinel.conf &&
            echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
            echo "sentinel resolve-hostnames no" >> /etc/sentinel.conf &&
            redis-server /etc/sentinel.conf --sentinel'

  mongo:
    image: mongo:8.0.8
    ports:
      - 27017:27017

  couchbase:
    image: couchbase/server:7.6.7
    hostname: couchbase
    ports:
      - '8091-8096:8091-8096'
      - '11210:11210'

  # Elasticsearch 7 compatible with client v7
  # elasticsearch:
  #  image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
  #  ports:
  #    - 9200:9200
  #  environment:
  #    discovery.type: single-node
  #    ES_JAVA_OPTS: "-Xms500m -Xmx500m"

  # Elasticsearch 9 compatible with client v7 & v9
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    ports:
      - 9200:9200
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms500m -Xmx500m"
      xpack.security.enabled: 'false'

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
      SCHEMA_REGISTRY_DEBUG: 'true'

  kafka:
    # v7 = Kafka v3.9.x
    # https://docs.confluent.io/platform/current/installation/versions-interoperability.html
    image: confluentinc/cp-kafka:7.9.0
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: EXTERNAL://:9092,PLAINTEXT://:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1

  kafka-topics:
    image: confluentinc/cp-kafka:7.9.0
    entrypoint: "/bin/bash"
    command:
      - -lc
      - |
        set -euo pipefail

        kafka_server="kafka:29092"
        kafka_topics="test test-topic test-batch-topic rdkafka-topic kafka-avro-topic"

        echo "Waiting for Kafka to be ready on $$kafka_server..."

        until kafka-topics --bootstrap-server "$$kafka_server" --list >/dev/null 2>&1; do
          echo "  ... still waiting for Kafka to be ready on $$kafka_server..."
          sleep 2
        done

        for t in $$kafka_topics; do
          kafka-topics --bootstrap-server "$$kafka_server" --create --if-not-exists --topic "$$t"
          echo "Created topic $$t"
        done

        echo "All topics created."
    restart: "no"

  mysql:
    image: mysql:8.0.26
    platform: linux/amd64
    ports:
      - 3306:3306
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: nodepw
      MYSQL_DATABASE: nodedb
      MYSQL_USER: node
      MYSQL_PASSWORD: nodepw
      MYSQL_ROOT_HOST: 0.0.0.0
    volumes:
      - ./packages/collector/test/tracing/databases/mysql/conf.d:/etc/mysql/conf.d

  postgres:
    image: postgres:10.5
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: node
      POSTGRES_PASSWORD: nodepw
      POSTGRES_DB: nodedb

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    platform: linux/amd64
    ports:
      - 1433:1433
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: stanCanHazMsSQL1
      MSSQL_PID: Express

  rabbitmq:
    image: rabbitmq:3.7.8-alpine
    ports:
      - 5671:5671
      - 5672:5672

  nats:
    image: nats:2.9.14-linux
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222

  nats-streaming:
    image: nats-streaming:0.25.3-linux
    command: -p 4223 -m 8223
    ports:
      - 4223:4223
      - 8223:8223

  memcached:
    image: memcached:1.6.9
    ports:
      - 11211:11211

  # https://hub.docker.com/r/ibmcom/db2
  db2:
    image: ibmcom/db2
    platform: linux/amd64
    privileged: true
    ports:
      - 58885:50000
    environment:
      - PERSISTENT_HOME=false
      - DBNAME=nodedb
      - BLU=false
      - HADR_ENABLED=false
      - ENABLE_ORACLE_COMPATIBILITY=false
      - UPDATEAVAIL=NO
      - SAMPLEDB=false
      - REPODB=false
      - IS_OSXFS=false
      - LICENSE=accept
      - DB2INSTANCE=node
      - DB2INST1_PASSWORD=nodepw
      - DB2_CREATE_DB_ON_PATH=true
      - STARTUP_MODE=restoreIfNotExists
    volumes:
       - ./db2/database:/database
       - ./db2/db2_data:/db2_data

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:latest
    hostname: localstack
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # external services port range
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

networks:
  redis-cluster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
