# See https://circleci.com/docs/2.0/language-javascript/ for docs.

version: 2.1

shared: &shared
  working_directory: ~/repo

  environment:
    - ELASTICSEARCH=127.0.0.1:9200
    - MONGODB=127.0.0.1:27017
    - ZOOKEEPER=127.0.0.1:2181
    - KAFKA=127.0.0.1:9092
    - KAFKA2=127.0.0.1:29092
    - SCHEMA_REGISTRY=127.0.0.1:8081
    - REDIS=127.0.0.1:6379
    - MYSQL_HOST=127.0.0.1
    - MYSQL_PORT=3306
    - MYSQL_USER=node
    - MYSQL_PW=nodepw
    - MYSQL_DB=nodedb
    - POSTGRES_HOST=127.0.0.1
    - POSTGRES_USER=node
    - POSTGRES_PASSWORD=nodepw
    - POSTGRES_DB=nodedb
    - MEMCACHED=localhost:11211
    - MSSQL_HOST=localhost
    - MSSQL_PORT=1433
    - MSSQL_USER=sa
    - MSSQL_PW=stanCanHazMsSQL1

  steps:
    - checkout
    - run: node --version
    - run: |
        if [ -n "$NPM_VERSION" ]; then
          sudo npm install npm@$NPM_VERSION -g
        fi
    - run: npm --version

    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-root-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-autoprofile-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/autoprofile/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-aws-fargate-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/aws-fargate/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-aws-lambda-auto-wrap-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/aws-lambda-auto-wrap/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-aws-lambda-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/aws-lambda/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-collector-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/collector/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-babel-typescript-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/collector/test/apps/babel-typescript/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-core-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/core/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-google-cloud-run-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/google-cloud-run/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-metrics-util-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/metrics-util/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-serverless-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/serverless/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-shared-metrics-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/shared-metrics/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-opentelemetry-exporter-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/opentelemetry-exporter/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-opentelemetry-sampler-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/opentelemetry-sampler/package-lock.json" }}
    - restore_cache:
        keys:
          - v{{ .Environment.CACHE_VERSION }}-misc-test-durations-{{ .Environment.CIRCLE_JOB }}-{{ checksum "misc/test-durations/package-lock.json" }}

    # We do not use npm ci (short for clean install) because it removes the existing node_modules folder. But we want to
    # re-use the existing node_modules folders from CircleCI's cache. Using npm ci would defeat that purpose. For the
    # same purpose, we reset the package lock file after running npm install. Sometimes npm install updates the lock
    # file and that will also break caching because its checksum would then change between save_cache and restore_cache
    # in the next CI run.
    - run: npm install && git checkout package-lock.json

    - run: cd misc/test-durations && npm install && git checkout package-lock.json

    # Cache the node_modules folders for the next run (before potentially installing other module versions like grpc,
    # see below).
    - save_cache:
        paths:
          - node_modules
        key: v{{ .Environment.CACHE_VERSION }}-root-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "package-lock.json" }}
    - save_cache:
        paths:
          - packages/autoprofile/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-autoprofile-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/autoprofile/package-lock.json" }}
    - save_cache:
        paths:
          - packages/aws-fargate/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-aws-fargate-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/aws-fargate/package-lock.json" }}
    - save_cache:
        paths:
          - packages/aws-lambda-auto-wrap/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-aws-lambda-auto-wrap-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/aws-lambda-auto-wrap/package-lock.json" }}
    - save_cache:
        paths:
          - packages/aws-lambda/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-aws-lambda-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/aws-lambda/package-lock.json" }}
    - save_cache:
        paths:
          - packages/collector/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-collector-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/collector/package-lock.json" }}
    - save_cache:
        paths:
          - packages/core/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-core-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/core/package-lock.json" }}
    - save_cache:
        paths:
          - packages/google-cloud-run/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-google-cloud-run-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/google-cloud-run/package-lock.json" }}
    - save_cache:
        paths:
          - packages/metrics-util/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-metrics-util-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/metrics-util/package-lock.json" }}
    - save_cache:
        paths:
          - packages/serverless/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-serverless-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/serverless/package-lock.json" }}
    - save_cache:
        paths:
          - packages/shared-metrics/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-shared-metrics-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/shared-metrics/package-lock.json" }}
    - save_cache:
        paths:
          - packages/opentelemetry-exporter/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-opentelemetry-exporter-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/opentelemetry-exporter/package-lock.json" }}
    - save_cache:
        paths:
          - packages/opentelemetry-sampler/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-opentelemetry-sampler-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/opentelemetry-sampler/package-lock.json" }}
    - save_cache:
        paths:
          - misc/test-durations/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-misc-test-durations-{{ .Environment.CIRCLE_JOB }}-{{ checksum "misc/test-durations/package-lock.json" }}

    # Only run audit with the most recent Node.js version - one Node version is enough.
    - run: "([[ $(node -v) =~ ^v16.*$ ]] && npm run audit) || [[ ! $(node -v) =~ ^v16.*$ ]]"

    # Check if all commits since the last release comply with the format that conventional-commit understands. This
    # makes sure that lerna version (with the "conventionalCommits" option set in lerna.json) can correctly determin the
    # next version number and generate changelogs.
    - run: "([[ $(node -v) =~ ^v16.*$ ]] && node_modules/.bin/commitlint --from $(git describe --tags --abbrev=0)) || [[ ! $(node -v) =~ ^v16.*$ ]]"

    # Run linting first, we don't want to wait ages for the test suite to finish only to end the CI job with a linting
    # error.
    - run: npm run lint

    # Clean up old left over AWS resources from earlier test runs (created more more than 3 hours ago):
    # Do not execute the script on every parallel build
    - run: |
        if [[ $(node -v) =~ ^v16.*$ && $CIRCLE_NODE_INDEX == "0" ]]; then
          bin/clean-aws.js --service=s3
          bin/clean-aws.js --service=dynamodb
          bin/clean-aws.js --service=sqs
          bin/clean-aws.js --service=kinesis
        fi

    # Run the test suites.
    # (Use ulimit to remove the file size limit on core dump files before running tests.)
    # The ci_glob_setup.sh script designates which files should be tested in each CircleCI process.
    # As the reported files include the aboslute path, we want to get rid of them. We do that after the test finishes.
    - run: |
        ulimit -c unlimited
        . ./bin/ci_glob_setup.sh
        if [[ -z "$NODE_COVERAGE" ]]; then
          npm run test:ci
        else
          npm run coverage-all
        fi

    - store_test_results:
        path: test-results

    - run: node misc/test-durations/ci

    - run:
        # save core dumps in case there have been any
        command: |
          mkdir -p /tmp/core_dumps
          cp core.* /tmp/core_dumps || :
          cp packages/shared-metrics/core.* /tmp/core_dumps || :
          cp packages/autoprofile/core.* /tmp/core_dumps || :
          cp packages/aws-fargate/core.* /tmp/core_dumps || :
          cp packages/aws-lambda-auto-wrap/core.* /tmp/core_dumps || :
          cp packages/aws-lambda/core.* /tmp/core_dumps || :
          cp packages/collector/core.* /tmp/core_dumps || :
          cp packages/core/core.* /tmp/core_dumps || :
          cp packages/google-cloud-run/core.* /tmp/core_dumps || :
          cp packages/metrics-util/core.* /tmp/core_dumps || :
          cp packages/serverless/core.* /tmp/core_dumps || :
          cp packages/shared-metrics/core.* /tmp/core_dumps || :
        when: on_fail
    - store_artifacts:
        path: /tmp/core_dumps
    - store_artifacts:
        path: coverage
    - store_artifacts:
        path: test-results
    - store_artifacts:
        path: test-duration-breakdown

    - save_cache:
        paths:
          - packages/collector/test/apps/babel-typescript/node_modules
        key: v{{ .Environment.CACHE_VERSION }}-babel-typescript-dependencies-{{ .Environment.CIRCLE_JOB }}-{{ checksum "packages/collector/test/apps/babel-typescript/package-lock.json" }}

elasticsearch: &elasticsearch
  - image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms500m -Xmx500m"

kafka: &kafka
  - image: wurstmeister/kafka:2.12-2.2.1
    environment:
      KAFKA_LISTENERS: EXTERNAL://:9092,PLAINTEXT://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:29092,EXTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CREATE_TOPICS: "test:1:1,test-topic-1:1:1,test-topic-2:1:1,test-batch-topic-1:1:1,test-batch-topic-2:1:1,rdkafka-topic:1:1,kafka-avro-topic:1:1"
      KAFKA_ZOOKEEPER_CONNECT: 127.0.0.1:2181

schema-registry: &schema-registry
  - image: confluentinc/cp-schema-registry:4.1.0
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "127.0.0.1:2181"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://127.0.0.1:29092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry

mongo: &mongo
  - image: circleci/mongo:4.1.13

mssql: &mssql
  - image: mcr.microsoft.com/mssql/server:2019-CU11-ubuntu-20.04
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: stanCanHazMsSQL1

mysql: &mysql
  - image: circleci/mysql:8.0.1
    environment:
      MYSQL_ROOT_PASSWORD: nodepw
      MYSQL_DATABASE: nodedb
      MYSQL_USER: node
      MYSQL_PASSWORD: nodepw
      MYSQL_ROOT_HOST: 0.0.0.0

postgres: &postgres
  - image: circleci/postgres:10.9-alpine
    environment:
      POSTGRES_USER: node
      POSTGRES_PASSWORD: nodepw
      POSTGRES_DB: nodedb

rabbitmq: &rabbitmq
  - image: circleci/rabbitmq:3.7.7

redis: &redis
  - image: circleci/redis:5.0.14

zookeeper: &zookeeper
  - image: wurstmeister/zookeeper:latest

nats: &nats
  - image: nats:2.0.2-linux

nats-streaming: &nats-streaming
  - image: nats-streaming:0.15.1-linux
    command: -p 4223 -m 8223

memcached: &memcached
  - image: memcached:1.6.9

jobs:
  "node-18":
    docker:
      - image: cimg/node:18.0
      - <<: *zookeeper
      - <<: *elasticsearch
      - <<: *mongo
      - <<: *redis
      - <<: *kafka
      - <<: *schema-registry
      - <<: *mysql
      - <<: *postgres
      - <<: *mssql
      - <<: *rabbitmq
      - <<: *nats
      - <<: *nats-streaming
      - <<: *memcached
    <<: *shared
    parallelism: 20

  "node-16":
    docker:
      - image: circleci/node:16
      - <<: *zookeeper
      - <<: *elasticsearch
      - <<: *mongo
      - <<: *redis
      - <<: *kafka
      - <<: *schema-registry
      - <<: *mysql
      - <<: *postgres
      - <<: *mssql
      - <<: *rabbitmq
      - <<: *nats
      - <<: *nats-streaming
      - <<: *memcached
    <<: *shared
    parallelism: 20

  "node-14":
    environment:
      NPM_VERSION: 8.6.0
    docker:
      - image: circleci/node:14
      - <<: *zookeeper
      - <<: *elasticsearch
      - <<: *mongo
      - <<: *redis
      - <<: *kafka
      - <<: *schema-registry
      - <<: *mysql
      - <<: *postgres
      - <<: *mssql
      - <<: *rabbitmq
      - <<: *nats
      - <<: *nats-streaming
      - <<: *memcached
    <<: *shared
    parallelism: 20

  "node-12":
    environment:
      NPM_VERSION: 8.6.0
    docker:
      - image: circleci/node:12
      - <<: *zookeeper
      - <<: *elasticsearch
      - <<: *mongo
      - <<: *redis
      - <<: *kafka
      - <<: *schema-registry
      - <<: *mysql
      - <<: *postgres
      - <<: *mssql
      - <<: *rabbitmq
      - <<: *nats
      - <<: *nats-streaming
      - <<: *memcached
    <<: *shared
    parallelism: 20

  "node-10":
    docker:
      - image: circleci/node:10
      - <<: *zookeeper
      - <<: *elasticsearch
      - <<: *mongo
      - <<: *redis
      - <<: *kafka
      - <<: *schema-registry
      - <<: *mysql
      - <<: *postgres
      - <<: *mssql
      - <<: *rabbitmq
      - <<: *nats
      - <<: *nats-streaming
      - <<: *memcached
    <<: *shared
    parallelism: 20

  "node-coverage":
    environment:
        NODE_COVERAGE: true
    docker:
      - image: cimg/node:16.15
      - <<: *zookeeper
      - <<: *elasticsearch
      - <<: *mongo
      - <<: *redis
      - <<: *kafka
      - <<: *schema-registry
      - <<: *mysql
      - <<: *postgres
      - <<: *mssql
      - <<: *rabbitmq
      - <<: *nats
      - <<: *nats-streaming
      - <<: *memcached
    <<: *shared
    parallelism: 1

workflows:
  version: 2
  build:
    jobs:
      - "node-18"
      - "node-16"
  legacy-nodejs-versions:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - "node-14"
      - "node-12"
      - "node-10"
  coverage:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - main
    jobs:
      - "node-coverage"
