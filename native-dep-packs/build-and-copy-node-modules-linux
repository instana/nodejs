function buildAndCopyModulesLinux {
  abi=$1
  nodejsversion=$2
  libcflavour=$3
  arch=$4
  if [[ $libcflavour = "glibc" ]]; then
    baseimage=node:$nodejsversion
    distro=standard
  elif [[ $libcflavour = "musl" ]]; then
    baseimage=node:$nodejsversion-alpine
    distro=alpine
  else
    echo "Unknown libc flavour parameter: $libcflavour"
    exit 1
  fi

  label=$distro-$nodejsversion
  dockerfile=Dockerfile.$distro
  dockertag=$label-native-packs
  docker stop $dockertag > /dev/null || true
  docker rm -f $dockertag > /dev/null || true
  echo "Building $dockerfile -> $dockertag"

  if [ "$arch" = "s390x" ]; then
    path_arch="$arch"
    docker buildx build \
      --platform=linux/$arch \
      --build-arg BASE_IMAGE=$arch/$baseimage \
      -f "$dockerfile" \
      --load -t "$dockertag" \
      .
  else
    path_arch="x64"
    docker build \
      --build-arg BASE_IMAGE=$baseimage \
      -f "$dockerfile" \
      -t "$dockertag" \
      .
  fi

  echo "docker build exit status: $?"
  echo "Running $dockertag"
  if [ "$arch" = "s390x" ]; then
    docker run --platform=linux/$arch -t -d --name "$dockertag" "$dockertag"
  else
    docker run -t -d --name "$dockertag" "$dockertag"
  fi
  echo "Waiting 5 seconds for the container to come up"
  sleep 5
  echo "Copying node_modules from container $dockertag to node_modules_$label"
  docker cp $dockertag:/instana/node_modules node_modules_$label
  mkdir -p ../packages/shared-metrics/addons/linux/$path_arch/$libcflavour/$abi/
  echo "Creating native addon tar.gz files"
  pushd node_modules_$label > /dev/null
  tar -czf ../../packages/shared-metrics/addons/linux/$path_arch/$libcflavour/$abi/event-loop-stats.tar.gz event-loop-stats
  tar -czf ../../packages/shared-metrics/addons/linux/$path_arch/$libcflavour/$abi/gcstats.js.tar.gz gcstats.js
  popd > /dev/null
  rm -rf node_modules_$label
  echo "Stopping $dockertag"
  docker stop $dockertag > /dev/null
  echo "Deleting $dockertag"
  docker rm -f $dockertag > /dev/null
}

